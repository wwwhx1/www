#include "stdafx.h"
#include<iostream>
#include<string>
#include<vector>
#include<fstream>
using namespace std;
class WC
{
private:
 string filename; //文件名
 vector <string> text; //全文存储器
 vector <string> order; //命令流
	int command; //命令数 
	long characters; //字符数
	int lines; //行数
	int letters; //单词数
	int sentences; //句子数
 	int empty; //空行数
	int annotation; //注释行数
public:
	bool Init(vector<string>& messagelist); //wc初始化操作 返回是否初始化成功
	void Basecount();                                    //wc统计操作
	void Output();                                          //wc输出操作
};
bool WC::Init(vector<string>& messagelist)//n为messagelist的成员数
{	
	if (messagelist[0] != "wc.exe")
	{
 cout << "Please enter wc.exe first if you want to use the Word_Count." << endl;
		return false;//初始化失败
	}
	//------------------------------------------------
	int n = messagelist.size();
	this->filename = messagelist[n - 1];//初始化文件名
	for (int i = 1 ; i < n - 1; i++)
		this->order.push_back( messagelist[i]) ; //初始化命令流
 command = order.size();                                         //初始化命令数
 characters = 0;
 letters = 0;
 lines = 0;
 sentences = 0;
 empty = 0;
 annotation = 0;
 ifstream infile("filename", ios::ate);
	if (!infile)
	{
 cerr << "Open error! Please check the filename." << endl;
		return false;//初始化失败
	}
	//--------------------------------------------------
 characters = infile.tellg();     //文件字符数统计
	//-------------------记录全文-------------------
 infile.seekg(0);   //把读指针定于文件开头
 string line; 
	while (getline(infile, line))
	{
 text.push_back(line);
 lines++;//同时完成总行数统计
		if (line.length() == 0) empty++;//空行统计
	}
 infile.close();
	return true;//初始化成功
}
//wc统计操作
void WC::Basecount()
{
	
 string line; 
	for (int l = 0; l < lines; l++)
	{
 line = text[l];
		unsigned int e = 0;                   //读指针当前位置
		unsigned int b = 0;                  //读指针上次位置
		for (e = 0, b=0; e < line.length(); e++)
		{
			//单词
			if ((line[e] == ' ' || line[e] == '.' || line[e] == '!' || line[e] == '?') && line[b] != ' ')
			{
 letters++;
			}
			//句子
			if (line[e] == '.' || line[e] == '!' || line[e] == '?')
			{
 sentences++;
			}
			//注释行
			if ((line[e] == '/' )&& (line[e+1] == '/' || line[e+1] == '*'))
			{
 annotation++;
			}
 b = e;//记录该次读指针
		}
	}
}
//wc输出操作
void WC::Output()
{
	for (int i = 0; i < command; i++)
	{
		//字符数
		if (order[i] == "-c" || order[i] == "-C")
 cout << "Character number : " << characters << endl;
		//字数
		else if (order[i] == "-w" || order[i] == "-W")
 cout << "Word number : " << letters << endl;
		//行数
		else if (order[i] == "-l" || order[i] == "-L")
 cout << "Line number : " << lines << endl;
		//句子数
		else if (order[i] == "-s" || order[i] == "-S")
 cout << "Sentence number : " << sentences << endl;
		//空行数
		else if (order[i] == "-e" || order[i] == "-E")
 cout << "Empty line number : " << empty << endl;
		//注释行数
		else if (order[i] == "-d" || order[i] == "-D")
 cout << "Definition line number : " << annotation << endl;
		else
 cout << order[i] << " is not defined in this program." << endl;
	}
}
void Splitmessage(vector<string>&,string);//命令分割 
int main()
{
 cout << "start"<< endl;   //标题
 vector <string> orderlist;
 string message="Begin";
	while (1)                          
	{
 WC file; //生成WC类实体
 orderlist.clear();//命令流清零
		getline(cin, message);
		if (message.length() == 0) continue;                            //排除空命令
		if (message == "exit" || message == "quit") break;    // 输入exit或quit退出程序
		Splitmessage(orderlist,message);
		if (!file.Init(orderlist))
			continue;
 file.Basecount();
 file.Output();
	}
    return 0;
}

void Splitmessage(vector <string>&orderlist, string message)
{
	int b=0;                   //命令长度
	int e=0;                   //开始字符
	int lenth = message.length();
	for (e = 0; e< lenth; e++)
	{
		if (message[e] != ' ')                    //遍历string寻找命令
		{
			while (message[e+b] != ' ')
			{
 b++;
				if (e+b>= lenth) break;
			}
 string x;
 x.assign(message, e, b);
 orderlist.push_back(x);
 e = e + b; 
 b =0;								          
		}	
	}
}
